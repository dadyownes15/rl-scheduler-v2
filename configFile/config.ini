# =============================================================================
# HPC Job Scheduling Configuration File
# =============================================================================
# This file contains all configuration parameters for the HPC job scheduling
# environment and reinforcement learning training.

# =============================================================================
# GAS-MARL SETTINGS
# =============================================================================
# Core parameters for the GAS-MARL (Green-Aware Scheduling Multi-Agent RL) algorithm
[GAS-MARL setting]

# eta: Reward weighting coefficient that balances carbon awareness vs. wait time optimization
# Formula: total_reward = eta * wait_penalty + green_reward
# - Higher eta (e.g., 0.001): Agent focuses more on reducing wait times
# - Lower eta (e.g., 0.0001): Agent focuses more on carbon optimization
# - eta = 0.0: Agent completely ignores wait times (carbon-only optimization)
eta = 0.0005

# max_queue_size: Maximum number of jobs that can be held in the scheduling queue
# This affects the observation space size for the RL agent
max_queue_size = 256

# run_win: Size of the running jobs observation window
# Number of currently running jobs the agent can observe for decision making
run_win = 64

# green_win: Size of the carbon intensity observation window (in time steps)
# How far into the future the agent can see carbon intensity predictions
# Larger values allow better long-term carbon optimization but increase observation space
green_win = 200

# delaymaxjobnum: Maximum number of jobs that can be delayed simultaneously
# Controls the agent's flexibility in delaying jobs for better carbon timing
delaymaxjobnum = 5

# delaytimelist: Available delay durations (in seconds) the agent can choose from
# Agent can delay jobs by any of these durations to optimize for low-carbon periods
# Values represent: [~18min, ~37min, ~1.5h, ~3h, ~6h, ~12h, ~24h]
delaytimelist = [1100,2200,5400,10800,21600,43200,86400]

# =============================================================================
# GENERAL SYSTEM SETTINGS
# =============================================================================
[general setting]

# processor_per_machine: Number of processors (cores) per physical machine
# Used for power consumption calculations and resource allocation
processor_per_machine = 8

# idlepower: Power consumption (watts) when a machine is idle but powered on
# Base power consumption even when no jobs are running
idlepower = 50

# max_perprocpower: Maximum power consumption (watts) per processor when fully utilized
# Used to calculate total machine power consumption based on utilization
max_perprocpower = 50

# carbon_year: Year of carbon intensity data to use for environmental simulation
# Available years depend on the carbon intensity dataset (e.g., 2021, 2022)
carbon_year = 2021

# =============================================================================
# POWER CONSUMPTION SETTINGS
# =============================================================================
[power setting]

# use_constant_power: Whether to use constant power per processor or variable power from CSV
# - True: Use constant_power_per_processor for all jobs (faster, simpler)
# - False: Use power values from ./data/power.csv (more realistic variation)
use_constant_power = True

# constant_power_per_processor: Fixed power consumption per processor (watts)
# Only used when use_constant_power = True
# Total job power = constant_power_per_processor Ã— number_of_processors_requested
constant_power_per_processor = 500

# =============================================================================
# CARBON INTENSITY SETTINGS
# =============================================================================
[carbon setting]

# use_dynamic_window: Whether to use dynamic or fixed carbon intensity windows
# - True: Window stretches from job start time to when last job in batch ends
#         (more realistic, considers actual scheduling context)
# - False: Fixed 24-hour window from job start time
#          (consistent comparison baseline, simpler)
use_dynamic_window = True

# =============================================================================
# ALGORITHM CONSTANTS
# =============================================================================
# Internal constants used by the RL algorithm - typically don't need modification
[algorithm constants]

# Maximum power consumption for normalization (watts)
max_power = 19000

# Maximum green/carbon metric for normalization
max_green = 19000

# Maximum wait time for normalization (seconds) - 12 hours
max_wait_time = 43200

# Maximum job runtime for normalization (seconds) - 12 hours
max_run_time = 43200

# Number of features per job in the observation vector
job_features = 7

# Maximum number of jobs in observation sequence
job_sequence_size = 256

# Number of features for running jobs observation
run_feature = 4

# Number of features for green/carbon observation
green_feature = 2

# Maximum carbon intensity value for normalization (gCO2/kWh)
max_carbon_intensity = 500.0

# =============================================================================
# TRAINING PARAMETERS
# =============================================================================
# Parameters controlling the reinforcement learning training process
[training parameters]

# seed: Random seed for reproducible experiments
# Set to same value for consistent results across runs
seed = 0

# epochs: Total number of training epochs
# Each epoch consists of collecting traj_num trajectories and updating the policy
epochs = 300

# traj_num: Number of trajectories (episodes) to collect per epoch
# Higher values provide more stable gradients but slower training
traj_num = 100

# =============================================================================
# REWARD FUNCTION CONFIGURATION
# =============================================================================
[reward_config]

# reward_function: Which reward function to use for training
# Available options:
# - carbon_aware: Original carbon-aware reward (matches legacy implementation)
# - simple_emission: Direct carbon emission penalty
# - hybrid: Combination of carbon, wait time, and utilization rewards
# - delay_penalty: Penalty based on job delays and priorities
# - elasticity: Real-time carbon vs. wait time trade-off score
reward_function = elasticity

# =============================================================================
# REWARD FUNCTION SPECIFIC PARAMETERS
# =============================================================================

# Parameters for hybrid reward function
[reward_hybrid]
# Relative weights for different optimization objectives (should sum to ~1.0)
carbon_weight = 0.5      # Weight for carbon emission minimization
wait_weight = 0.3        # Weight for wait time minimization  
utilization_weight = 0.2 # Weight for resource utilization maximization

# Parameters for simple emission reward function
[reward_simple_emission]
# emission_weight: Scaling factor for carbon emission penalty
emission_weight = 1.0

# Parameters for delay penalty reward function
[reward_delay_penalty]
# delay_weight: Scaling factor for delay penalties
delay_weight = 1.0
# priority_weight: Additional penalty multiplier for high-priority delayed jobs
priority_weight = 0.5

# Parameters for elasticity reward function
[reward_elasticity]
# min_jobs_for_calculation: Minimum number of scheduled jobs needed before calculating elasticity score
# Lower values give faster feedback but less stable estimates
# Higher values give more stable estimates but slower adaptation
min_jobs_for_calculation = 20

# buffer_size: Maximum number of recent jobs to keep in memory for score calculation
# Larger buffers provide more data for regression but use more memory
# Should be significantly larger than min_jobs_for_calculation
buffer_size = 256 


# score_weight: Scaling factor applied to the elasticity score when used as reward
# Positive values encourage higher elasticity scores (better carbon vs. wait trade-off)
# Can be tuned based on the typical range of elasticity scores in your domain
score_weight = 1.0

# default_score: Default elasticity score when insufficient data is available
# Used during early training before enough jobs have been scheduled
# Should be set to a neutral value (typically 0.0)
default_score = 0.0

